knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 6, fig.height = 4)
library(SummarizedExperiment)
library(edgeR)
library(DESeq2)
library(tweeDEseq)
library(tweeDEseqCountData)
library(GOstats)
library(annotate)
library(org.Hs.eg.db)
library(biomaRt)
library(ggplot2)
library(ggrepel)
# wget() to know the current working directory
setwd("~/Descargas/Project4")# will change the current directory to the Project4 folder inside the Descargas folder
# Read RSE data of the cancer experiment
load(file = "data/pleuralCancer/rse_gene_pleura.Rdata")
stage <- rse_gene$gdc_cases.diagnoses.tumor_stage
# id list of early tumours
ids.early <-grep(paste("stage i$", "stage ia$","stage ib$","stage ic$", "stage ii$", "stage iia$","stage iib$", "stage iic$",sep="|"), stage)
# id list of late tumours
ids.late <-grep(paste("stage iii$", "stage iiia$", "stage iiib$","stage iiic$", "stage iv$", "stage iva$","stage ivb$", "stage ivc$",sep="|"), stage)
# create an empty column named GROUP
colData(rse_gene)$GROUP <-rep(NA, ncol(rse_gene))
# add early for those patients with tumours at stages i-ii
colData(rse_gene)$GROUP[ids.early] <- "early"
# add late for those patients with tumours at stages iii-iv
colData(rse_gene)$GROUP[ids.late] <- "late"
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
View(dataGroups)
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot2(data= dataGroups, mapping = aes(x = stage), labels(c("early), "late)) +
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot2(data= dataGroups, mapping = aes(x = stage), labels(c("early", "late")) +
geom_bar()
# ggplot2 plot
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot2(data= dataGroups, mapping = aes(x = stage), labels = c("early", "late")) +
geom_bar()
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot(data= dataGroups, mapping = aes(x = stage), labels = c("early", "late")) +
geom_bar()
# ggplot2 plot
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot(data= dataGroups, mapping = aes(x = stage), labels = c("early", "late"), fill = Group) +
geom_bar()
# ggplot2 plot
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot(data= dataGroups, mapping = aes(x = stage, fill = Group), labels = c("early", "late")) +
geom_bar()
# ggplot2 plot
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot(data= dataGroups, mapping = aes(x = stage, fill = Group), labels = c("early", "late")) +
geom_bar() +
labs(x = Stage, y = Number of patients)
# create dataframe
dataGroups <- data.frame(Stage = rse_gene$gdc_cases.diagnoses.tumor_stage, Group = rse_gene$GROUP)
ggplot(data= dataGroups, mapping = aes(x = stage, fill = Group), labels = c("early", "late")) +
geom_bar() +
labs(x = "Stage", y = "Number of patients")
# ggplot2 plot
# Check if the status is NA
naData <- is.na(rse_gene$GROUP)
table(naData)
# Check if the status is NA
naData <- is.na(rse_gene$GROUP)
table(naData)
# After removing
dim(rse_gene)
# Remove NA
rse_gene <- rse_gene[, !naData]
dim(rse_gene)
# summary of the patients
table(rse_gene$GROUP)
# save the count data
counts <- assay(rse_gene, "counts")
counts[1:5, 1:2]
# save the phenotype data
phenotype <- colData(rse_gene)
phenotype[1:5, 1:2]
# check if the same individuals are found in the datasets
identical(colnames(counts), rownames(phenotype))
# save the annotation data
annotation <- rowData(rse_gene)
View(annotation)
# save the annotation data
annotation <- rowData(rse_gene)
dim(annotation)
head(annotation)
maPlot(counts[,1],
counts[,2],
pch=19,
cex=.5,
ylim=c(-8,8),
allCol="darkgray",
lowess=TRUE,
xlab=expression(A == log[2] (sqrt(S1/N %.% S2/N))),
ylab=expression(M == log[2](S1/N)-log[2](S2/N)))
grid(col="black")
title("Raw data")
# length of the gene
geneLength <- annotation$bp_length
# RPKM normalization method
counts.rpkm <- t(t(counts/geneLength*1000)/colSums(counts)*1e6)
counts.rpkm[1:5,1:2]
maPlot(counts.rpkm[,1],
counts.rpkm[,2],
pch=19,
cex=.5,
ylim=c(-8,8),
allCol="darkgray",
lowess=TRUE,
xlab=expression( A==log[2] (sqrt(S1/N%.%S2/N))),
ylab=expression(M==log[2](S1/N)-log[2](S2/N)))
grid(col="black")
title("RPKM")
# TMM normalization method
counts.tmm <- normalizeCounts(counts, method = "TMM")
counts.tmm[1:5,1:2]
maPlot(counts.tmm[,1],
counts.tmm[,2],
pch=19, cex=.5,
ylim=c(-8,8),
allCol="darkgray",
lowess=TRUE,
xlab=expression( A==log[2] (sqrt(S1/N%.%S2/N))),
ylab=expression(M==log[2](S1/N)-log[2](S2/N)))
grid(col="black")
title("TMM")
# stage of each patient
pheno.stage <- subset(phenotype, select=GROUP)
# recreate the counts in a new matrix
counts.adj <- matrix((as.vector(as.integer(counts))), nrow=nrow(counts), ncol=ncol(counts))
rownames(counts.adj) = rownames(counts)
colnames(counts.adj) = colnames(counts)
# check information
identical(colnames(counts.adj), rownames(pheno.stage))
# transform the group variable to factor
pheno.stage$GROUP <- as.factor(pheno.stage$GROUP)
# create the DESeqDataSet input
DEs <- DESeqDataSetFromMatrix(countData = counts.adj,
colData = pheno.stage,
design = ~ GROUP)
# differential expression analysis
dds <- DESeq(DEs)
# results extracts a result table from a DESEq analysis
res <- results(dds, pAdjustMethod = "fdr")
head(res)
plotMA(res, ylim=c(-20,20), main='Differentially expressed genes in early vs late pleura cancer')
res.padj <- res[(res$padj < 0.001 & !is.na(res$padj)),]
nrow(res.padj)
res.padj_4fold <- res.padj[abs(res.padj$log2FoldChange) > log2(10),]
nrow(res.padj_4fold)
# we first create the dataframe with the results of the DE
resDF <- as.data.frame(res)
# new column with the gene names
resDF$gene <- rownames(resDF)
# new column with TRUE/FALSE representing if a gene is differetially expressed or not
resDF$filter <- abs(res$log2FoldChange) > log2(10) & res$padj < 0.001
table(resDF$filter)
View(resDF)
ggplot2(data = resDF, mapping = aes(x = log2FoldChange, y = -log(pvalue))) +
geom_point()
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log(pvalue))) +
geom_point()
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point()
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point()
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point() +
theme_bw()
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point() +
theme_bw() +
scale_color_manual(values = "blue")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point() +
theme_bw() +
scale_color_manual(values = "blue")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point() +
theme_bw() +
scale_color_manual(values ("blue"))
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point() +
theme_bw() +
scale_color_manual()
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point() +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "blue") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "turquoise") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "turquoise2") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "turquoise1") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "bluesea") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue3") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue2") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue3") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)")
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue3") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)") +
geom_label_repel(data=resDF[abs(resDF$log2FoldChange) > log2(10) & resDF$padj < 0.001 ,], aes(label = as.factor(gene)), alpha = 0.7, size = 5, force = 1.3)
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue3") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)") +
geom_label_repel(data=resDF[abs(resDF$log2FoldChange) > log2(10) & resDF$padj < 0.001 ,], aes(label = as.factor(gene)), alpha = 0.7, size = 4, force = 1.3)
ggplot(data = resDF, mapping = aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(colour = "cadetblue3") +
theme_bw() +
scale_color_manual() +
labs(title = "Volcano plot", x = "Effect size: log2(fold-change)", y = "-log10(adjusted p-value)") +
geom_label_repel(data=resDF[abs(resDF$log2FoldChange) > log2(10) & resDF$padj < 0.001 ,], aes(label = as.factor(gene)), alpha = 0.7, size = 3, force = 1.3)
# we save a list of DE genes, and we remove the last part of the id
deGenes <- gsub("\\..*", "",rownames(res.padj_4fold))
head(deGenes)
biomart_uses <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
biomart_uses
Entrez_BM <- getBM(attributes=c("ensembl_gene_id", "entrezgene_id"),
filter="ensembl_gene_id",
values=deGenes,
mart=biomart_uses,
uniqueRows=TRUE)
dim(Entrez_BM)
head(Entrez_BM)
Entrez_ids
Entrez_ids <- as.character(na.omit(Entrez_BM$entrezgene_id))
Entrez_BM
Entrez_ids <- as.character(na.omit(Entrez_BM$entrezgene_id))
length(Entrez_ids)
universe <- mappedkeys(org.Hs.egGO)
count.mappedkeys(org.Hs.egGO)
# Set the threshold for the p value to 5%
GOtest <- new("GOHyperGParams",
geneIds = Entrez_ids,
universeGeneIds=universe,
annotation = "org.Hs.eg.db",
ontology = "BP",
pvalueCutoff= 0.05,
conditional = FALSE,
testDirection = "over")
# hypergeometric test
GOtestOver <- hyperGTest(GOtest)
GOtestOver
GOresult <- summary(GOtestOver)
head(GOresult)
View(GOresult)
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = term)) +
geom_bar()
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = "term")) +
geom_bar()
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = Term)) +
geom_bar()
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = Term)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = Term)) +
geom_col() +
#theme(axis.text.x = element_text(angle = 90, hjust = 1))
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = Term)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = Term, y = Count)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# ggplot2 plot
ggplot(data = GOresult, mapping = aes(x = Term, y = Count)) +
geom_col()
#theme(axis.text.x = element_text(angle = 90, hjust = 1))
GOResultFilter <- subset(Goresult, GOresult$Count >=5)
GOResultFilter <- subset(GOresult, GOresult$Count >=5)
# ggplot2 plot
ggplot(data = GOresultFilter, mapping = aes(x = Term, y = Count)) +
geom_col()
GOResultFilter <- subset(GOresult, GOresult$Count >=5)
# ggplot2 plot
ggplot(data = GOResultFilter, mapping = aes(x = Term, y = Count)) +
geom_col()
#theme(axis.text.x = element_text(angle = 90, hjust = 1))
GOResultFilter <- subset(GOresult, GOresult$Count >=5)
# ggplot2 plot
ggplot(data = GOResultFilter, mapping = aes(x = Term, y = Count)) +
geom_col(colour = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
GOResultFilter <- subset(GOresult, GOresult$Count >=5)
# ggplot2 plot
ggplot(data = GOResultFilter, mapping = aes(x = Term, y = Count)) +
geom_col(fill = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
GOResultFilter <- subset(GOresult, GOresult$Count >=5)
# ggplot2 plot
ggplot(data = GOResultFilter, mapping = aes(x = Term, y = Count)) +
geom_col(fill = "red4") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
